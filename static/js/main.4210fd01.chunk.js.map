{"version":3,"sources":["Cell.js","Board.js","Home.js","About.js","Navbar.js","User.js","App.js","serviceWorker.js","index.js"],"names":["Cell","isInitial","num","onChange","onClick","e","className","validate","board","isValid","i","horizontal","Set","vertical","square","j","add","Math","floor","delete","size","Board","state","statusText","timer","loading","restartBoard","setState","fetch","then","resp","json","jsonResp","initial","map","row","item","submit","clearInterval","interval","this","setInterval","key","newNum","Component","Home","About","Navbar","style","fontSize","to","marginRight","User","props","match","params","id","history","goBack","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4210fd01.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = ({ isInitial, num, onChange }) => {\n  return (\n    <div\n      onClick={e => {\n        if (isInitial) {\n          return;\n        }\n        onChange((num + 1) % 5);\n      }}\n      className={`cell ${isInitial ? 'initial' : ''}`}\n    >\n      {num !== 0 && num}\n    </div>\n  );\n};\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\n\nconst validate = board => {\n  let isValid = true;\n  for (let i = 0; i < 4; i++) {\n    const horizontal = new Set();\n    const vertical = new Set();\n    const square = new Set();\n    for (let j = 0; j < 4; j++) {\n      horizontal.add(board[i][j]);\n      vertical.add(board[j][i]);\n      square.add(\n        board[2 * (i % 2) + (j % 2)][2 * Math.floor(i / 2) + Math.floor(j / 2)]\n      );\n    }\n    horizontal.delete(0);\n    vertical.delete(0);\n    square.delete(0);\n    if (horizontal.size !== 4 || vertical.size !== 4 || square.size !== 4) {\n      isValid = false;\n    }\n  }\n  return isValid;\n};\n\nclass Board extends Component {\n  state = {\n    statusText: '',\n    timer: 0,\n    loading: true\n  };\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        timer: this.state.timer + 1\n      });\n    }, 1000);\n    this.restartBoard();\n  }\n  restartBoard = () => {\n    this.setState.loading = true;\n    fetch(\n      'https://us-central1-skooldio-courses.cloudfunctions.net/react_01/random'\n    )\n      .then(resp => {\n        return resp.json();\n      })\n      .then(jsonResp => {\n        this.setState({\n          board: jsonResp.board,\n          timer: 0,\n          initial: jsonResp.board.map(row => row.map(item => item !== 0)),\n          loading: false\n        });\n      });\n  };\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  submit = () => {\n    const isValid = validate(this.state.board);\n    if (isValid) {\n      clearInterval(this.interval);\n    }\n    this.setState({\n      statusText: isValid ? 'Board is Complete :) ' : 'Board is invalid :('\n    });\n  };\n  render() {\n    return (\n      <div>\n        <p className=\"timer\">Elapsed Time : {this.state.timer} seconds</p>\n        <div className=\"board\">\n          {!this.state.loading ? (\n            this.state.board.map((row, i) =>\n              row.map((num, j) => (\n                <Cell\n                  isInitial={this.state.initial[i][j]}\n                  key={`cell-${i}-${j}`}\n                  num={num}\n                  onChange={newNum => {\n                    const { board } = this.state;\n                    board[i][j] = newNum;\n                    this.setState({\n                      board\n                    });\n                  }}\n                />\n              ))\n            )\n          ) : (\n            <h2>Loading ...</h2>\n          )}\n        </div>\n        <button className=\"restart-button\" onClick={this.restartBoard}>\n          Restart\n        </button>\n        <button onClick={this.submit}>Submit</button>\n        <p>{this.state.statusText}</p>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Board';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n        <Board />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class About extends Component {\n  render() {\n    return <div>About Content ...</div>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <div style={{ fontSize: '20px' }}>\n        <Link to=\"/\" style={{ marginRight: '30px' }}>\n          Home\n        </Link>\n        <Link style={{ marginRight: '30px' }} to=\"/about\">\n          About\n        </Link>\n        <Link to=\"/user/james\">User </Link>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class User extends Component {\n  render() {\n    return (\n      <div>\n        <br />\n        User ID : {this.props.match.params.id} <br />\n        <button\n          onClick={e => {\n            this.props.history.goBack();\n          }}\n        >\n          Go Back\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Home from './Home';\nimport About from './About';\nimport Navbar from './Navbar';\nimport User from './User';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route path=\"/User/:id\" component={User} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}